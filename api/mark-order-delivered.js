const { getGoogleSheet, getSellerSheet } = require('./sheets-config');
const moment = require('moment');

// Configuraci√≥n de ganancias por art√≠culo
const ARTICLE_PROFIT_CONFIG = {
  'Lords Mobile': {
    'üíé120': 2,
    'üíé300': 5,
    'üíé500': 8,
    'üíé1000': 15,
    'üíé2000': 30,
    'üíé5000': 75,
    'üíé499+CUPON': 8,
    'üéØElite': 5,
    'üéØPremium': 8,
    '‚ö°Mejora': 3,
    'üìÖ7 d√≠as': 2,
    'üìÖ30 d√≠as': 8
  },
  'Blood Strike': {
    'üíé60': 1,
    'üíé300': 5,
    'üíé980': 15,
    'üíé1980': 30,
    'üíé3280': 50,
    'üíé6480': 95
  },
  'Free Fire': {
    'üíé100': 2,
    'üíé310': 5,
    'üíé520': 8,
    'üíé1080': 15,
    'üíé2200': 30,
    'üíé5600': 75
  },
  'Genshin Impact': {
    'üíé60': 1,
    'üíé300': 5,
    'üíé980': 15,
    'üíé1980': 30,
    'üíé3280': 50,
    'üíé6480': 95
  },
  'PUBG Mobile': {
    'üíé60': 1,
    'üíé325': 5,
    'üíé660': 10,
    'üíé1800': 25,
    'üíé3850': 50,
    'üíé8100': 100
  },
  'Delta Force': {
    'üíé300': 5,
    'üíé980': 15,
    'üíé1980': 30,
    'üíé3280': 50,
    'üíé6480': 95
  },
  'Call of Duty Mobile': {
    'üíé80': 1,
    'üíé400': 6,
    'üíé800': 12,
    'üíé2000': 28,
    'üíé5200': 70
  }
};

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©todo no permitido' });
  }

  try {
    const { orderId } = req.body;

    if (!orderId) {
      return res.status(400).json({ error: 'ID de pedido requerido' });
    }

    const doc = await getGoogleSheet();
    const pendingOrdersSheet = doc.sheetsByTitle['Pedidos_Pendientes'];
    
    if (!pendingOrdersSheet) {
      return res.status(404).json({ error: 'Hoja de pedidos pendientes no encontrada' });
    }

    const rows = await pendingOrdersSheet.getRows();
    const orderRow = rows.find(row => row.get('ID') === orderId);
    
    if (!orderRow) {
      return res.status(404).json({ error: 'Pedido no encontrado' });
    }

    // Obtener datos del pedido
    const orderData = {
      juego: orderRow.get('Juego'),
      articulo: orderRow.get('Art√≠culo'),
      cantidad: parseInt(orderRow.get('Cantidad')),
      montoTotal: parseFloat(orderRow.get('Monto Total')),
      vendedor: orderRow.get('Vendedor'),
      nombreJugador: orderRow.get('Nombre Jugador')
    };

    // Calcular ganancia
    const profitPerUnit = ARTICLE_PROFIT_CONFIG[orderData.juego]?.[orderData.articulo] || 0;
    const totalProfit = profitPerUnit * orderData.cantidad;

    // Registrar venta en la hoja del vendedor
    try {
      const sellerSheet = await getSellerSheet(orderData.vendedor);
      const currentDate = moment().format('DD/MM/YYYY HH:mm:ss');
      
      await sellerSheet.addRow({
        'Juego': orderData.juego,
        'Art√≠culo': orderData.articulo,
        'Cantidad': orderData.cantidad,
        'Monto Total': orderData.montoTotal,
        'Ganancia': totalProfit,
        'Fecha': currentDate
      });
    } catch (sellerSheetError) {
      console.error('Error registrando en hoja del vendedor:', sellerSheetError);
    }

    // Actualizar estado del pedido
    orderRow.set('Estado', 'Entregado');
    orderRow.set('Fecha Entrega', moment().format('DD/MM/YYYY HH:mm:ss'));
    await orderRow.save();

    // Enviar notificaci√≥n de entrega
    try {
      await fetch('http://localhost:3001/api/delivery-notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId,
          game: orderData.juego,
          item: orderData.articulo,
          quantity: orderData.cantidad,
          seller: orderData.vendedor,
          playerName: orderData.nombreJugador
        })
      });
    } catch (notificationError) {
      console.error('Error enviando notificaci√≥n de entrega:', notificationError);
    }

    res.status(200).json({
      success: true,
      message: 'Pedido marcado como entregado exitosamente'
    });

  } catch (error) {
    console.error('Error marcando pedido como entregado:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
}